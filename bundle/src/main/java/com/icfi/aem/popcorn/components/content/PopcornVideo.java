package com.icfi.aem.popcorn.components.content;

import com.citytechinc.aem.bedrock.api.node.ComponentNode;
import com.citytechinc.aem.bedrock.api.page.PageDecorator;
import com.citytechinc.aem.bedrock.api.request.ComponentRequest;
import com.citytechinc.aem.bedrock.core.components.AbstractComponent;
import com.citytechinc.cq.component.annotations.Component;
import com.citytechinc.cq.component.annotations.Listener;
import com.day.cq.dam.api.Asset;
import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.resource.Resource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

/**
 * Backing bean for the popcornvideo timeline
 */
@Component(value = "Popcorn Video",
		disableTargeting = true,
		layout = "rollover",
		dialogHeight = 500,
		dialogWidth = 900,
		listeners = {@Listener(name = "afterinsert", value = "REFRESH_PAGE"), @Listener(name = "afteredit", value = "REFRESH_PAGE")})
public class PopcornVideo extends AbstractComponent {
	private static final Logger LOG = LoggerFactory.getLogger(PopcornVideo.class);

	private String videoTitle;

	private List<String> componentPaths = new ArrayList<String>();
    private List<ComponentInfo> components = new ArrayList<ComponentInfo>();

	@Override
	public void init(final ComponentRequest request) {
        List<ComponentNode> nodes = getComponentNodes("components");

        for (ComponentNode node : nodes) {
            String path = node.get("componentPath", StringUtils.EMPTY);
            componentPaths.add(path);
            components.add(new ComponentInfo(path,null));
        }

		Asset asset = null;
		Resource assetRes = request.getResourceResolver().getResource(get("asset", StringUtils.EMPTY));
		if (assetRes != null) {
			asset = assetRes.adaptTo(Asset.class);
		}
		if (asset != null) {
            videoTitle = asset.getMetadataValue("dc:title");
            if(videoTitle == null || videoTitle.length() < 1){
                videoTitle = asset.getName();
            }
		}

	}

    /**
     * Returns a list of component paths selected in the dialog
     * @return
     */
	public List<String> getComponentPaths() {
		return componentPaths;
	}

    /**
     * Returns a list of ComponentInfo objects which contain a path and name for each component selected in the dialog.
     * @return
     */
    public List<ComponentInfo> getComponents() {
        return components;
    }

    public String getVideoTitle(){
        return videoTitle;
    }

    /**
     * Contains a full jcr path to the component and a relative name for it
     */
	public class ComponentInfo {
		String path;
		String name;

        /**
         * Initialize component info. If you don't provide a name one will be generated by removing the current page from the path
         * @param path
         * @param name
         */
		public ComponentInfo(String path, String name){
			this.path = path;
            if(StringUtils.isEmpty(name)){
                this.name = this.generateNameFromPath(path);
            } else {
                this.name = name;
            }
		}

		public String getPath(){
			return this.path;
		}

		public String getName() {
			return this.name;
		}

        /**
         * Removes the current page path from the component path. You should get a relative path to the component.
         * If the component is on another page you will get the full path.
         * @param path
         * @return
         */
        private String generateNameFromPath(String path){
            PageDecorator page = getCurrentPage();
            String pagePath = page.getPath();
            if(!StringUtils.isEmpty(path) && path.startsWith(pagePath)){
                path = path.substring(pagePath.length() + 1);
            }
            LOG.error("component path = " + path);
            return path;
        }
	}

}